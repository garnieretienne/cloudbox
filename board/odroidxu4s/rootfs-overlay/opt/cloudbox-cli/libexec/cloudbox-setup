#!/usr/bin/env bash
# Usage: cloudbox setup
# Summary: Start the setup wizard for your cloudbox
# Help: This command will run you through a question based wizard to complete
# the installation of your cloudbox.

source_dir="$(dirname "$0")/.."
source $source_dir/share/cloudbox/ui
source $source_dir/share/cloudbox/helpers

SSH_PUBKEY_URL=http://cloudbox.local/cloudbox.pub

function exit_if_already_installed {
    if [ -f "/var/www/app/config/config.php" ]; then
        echo "Your box is already configured."
        exit 0
    fi
}

function secure_app_account {
    echo -e "${app_password}\n${app_password}" | sudo passwd app
    helper.update_config "/etc/ssh/sshd_config" "PermitEmptyPasswords.*" \
        "#PermitEmptyPasswords no"
}

function generate_ssl_cert {
    sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
        -keyout /etc/apache2/server.key -out /etc/apache2/server.crt \
        -subj "/C=FR"
}

function set_cloudbox_fqdn {
    echo "$domainname" | sudo tee /etc/gateway/domainname &&
    sudo chmod 744 /etc/gateway/domainname
}

function create_ssh_access {
    sudo adduser -h "/home/${admin_username}" -g "Administrator user" \
        -s /bin/bash -G app -S $admin_username &&
    echo -e "${admin_password}\n${admin_password}" | sudo passwd $admin_username
}

function generate_ssh_host_keys {
    sudo ssh-keygen -C "cloudbox key" -t rsa -f "/etc/gateway/ssh/id_rsa" -q \
        -N "" &&
    sudo chmod 744 /etc/gateway/ssh/id_rsa.pub
}

function publish_ssh_host_pubkey {
    sudo cp /etc/gateway/ssh/id_rsa.pub /var/www/setup/cloudbox.pub &&
    sudo chmod 744 /var/www/setup/cloudbox.pub
}

function test_gateway_connection {
    sudo ssh -o "StrictHostKeyChecking no" -o "BatchMode yes" \
        -i /etc/gateway/ssh/id_rsa root@$domainname exit
}

function initialize_hard_drive {
    sudo mkfs.btrfs --force --label cloudbox /dev/sda &&
    sudo mount /dev/sda /mnt &&
    sudo btrfs subvolume create /mnt/data &&
    sudo chown app:app /mnt/data &&
    sudo chmod 770 /mnt/data/ &&
    echo -e "/dev/sda\t/mnt\t\tbtrfs\tdefaults,noauto\t0\t0" | \
        sudo tee -a /etc/fstab
}

function install_nextcloud {
    occ maintenance:install --database mysql --database-host 127.0.0.1 \
        --database-port 3306 --database-name nextcloud --database-user root \
        --database-pass "" --admin-user "${admin_username}" \
        --admin-pass "${admin_password}" --data-dir /mnt/data
}

function configure_nextcloud {
    occ config:system:set trusted_domains 0 --value cloudbox.local &&
    occ config:system:set trusted_domains 1 --value $domainname &&
    occ --quiet db:convert-filecache-bigint
}

function configure_nextcloud_caching {
    occ config:system:set redis host --value '127.0.0.1' &&
    occ config:system:set redis port --value '6379' &&
    occ config:system:set memcache.local --value '\OC\Memcache\Redis' &&
    occ config:system:set memcache.locking --value '\OC\Memcache\Redis'
}

function update_vhost {
    helper.update_config "/etc/apache2/extra/httpd-vhosts.conf" \
        "#SSLCertificateFile" "SSLCertificateFile"
    helper.update_config "/etc/apache2/extra/httpd-vhosts.conf" \
        "#SSLCertificateKeyFile" "SSLCertificateKeyFile"
    helper.update_config "/etc/apache2/extra/httpd-vhosts.conf" \
        "RewriteEngine.*" "RewriteEngine On"
    helper.update_config "/etc/apache2/extra/httpd-vhosts.conf" \
        "SSLEngine.*" "SSLEngine On"
    helper.update_config "/etc/apache2/extra/httpd-vhosts.conf" \
        "DocumentRoot.*" 'DocumentRoot "/var/www/app"'
}

exit_if_already_installed

clear

ui.topic "Welcome on Cloudbox!"
ui.message "This SSH account ('app') is used to configure your box."
ui.ask_password "Choose a password for the 'app' SSH user"; app_password=$asked
ui.task "Securing the 'app' SSH account" "secure_app_account"

ui.topic "Please complete the following setup wizard"
while true; do
    ui.ask "Choose an administrator username" "admin"; admin_username=$asked
    if [ "$admin_username" == "root" ]; then
        ui.message "The 'root' username is reserved"
    elif [ "$admin_username" == "app" ]; then
        ui.message "The 'app' username is reserved"
    else
        break
    fi
done
ui.ask_password "Choose an administrator password"; admin_password=$asked

ui.topic "Rooting the device"
ui.message "Your box is locked, a root ssh account can be created (advanced)."
ui.ask_yes_no "Do you want to unlock your device?"; ssh_access=$asked
if $ssh_access; then
    ui.task "Creating an SSH access" "create_ssh_access"
fi

ui.topic "Network configuration"
ui.ask "Enter your cloudbox fully qualified domain name"; domainname=$asked
ui.task "Setting your cloudbox fully qualified domain name" "set_cloudbox_fqdn"
ui.task "Generating SSH keys for your gateway server" "generate_ssh_host_keys"
ui.task "Publishing the SSH public key" "publish_ssh_host_pubkey"
while true; do
    ui.message "Please upload this SSH public key to your gateway server"
    ui.message "Download: ${SSH_PUBKEY_URL}"
    ui.message "wget ${SSH_PUBKEY_URL} &&" \
        "ssh-copy-id -f -i cloudbox.pub root@${domainname} &&" \
        "rm cloudbox.pub"
    ui.continue
    if ui.do "Testing the gateway connection" "test_gateway_connection"; then
        break
    fi
    ui.message "Cannot connect to the gateway"
done

ui.topic "Device configuration"
ui.message "This step will erase all data on the hard disk."
ui.message "Ensure no other disks are plugged onto the device."
ui.continue
ui.task "Formating the hard drive" "initialize_hard_drive"

ui.topic "Nextcloud configuration"
ui.task "Installing Nextcloud" "install_nextcloud"
ui.task "Configuring Nextcloud" "configure_nextcloud"
ui.task "Configuring Nextcloud caching" "configure_nextcloud_caching"

ui.topic "System configuration"
ui.task "Generating SSL certificates" "generate_ssl_cert"
ui.task "Updating the webserver configuration" "update_vhost"

ui.message "Installation completed."
ui.message "Your box is configured and will now reboot."
ui.message "You will be able to reach your box using: https://cloudbox.local"
ui.message "https://cloudbox.local or https://${domainname}"
if $ssh_access; then
    ui.message \
        "You can SSH to your box using: ssh ${admin_username}@cloudbox.local"
fi
ui.continue
ui.task "Reboot" "sudo reboot"

