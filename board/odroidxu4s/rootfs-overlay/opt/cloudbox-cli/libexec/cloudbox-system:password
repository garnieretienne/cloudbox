#!/usr/bin/env bash
# Usage: cloudbox system:password
# Summary: Manage the system passwords
# Help: Manage the system passwords for the `app` or root users
#
# Usage:
#   cloudbox system:password
#   cloudbox system:password change [--user <user>] [--password <password>]
#
# Commands:
#   ch, change          # enable or change the user password
#
# Options:
#   -u, --user          # the 'app' or 'root' user (default: 'app')
#   -p, --password      # new password for the user
#
# Example:
#   $ cloudbox system:password
#   $ cloudbox system:password change --password new_password
#   $ cloudbox system:password change --user root --password new_password
#

source_dir="$(dirname "$0")/.."
source $source_dir/share/cloudbox/ui
source $source_dir/share/cloudbox/vars
source $source_dir/share/cloudbox/helpers

options=$(getopt --options p:c --longoptions password:,c -- "$@")
eval set -- "$options"

while [ ! -z "$1" ]; do
    case "$1" in
        -p | --password) password=$2;;
        --) shift && break;;
    esac
    shift
done

function update_user_password {
    echo -e "${password}\n${password}" | sudo passwd $user
}

function ui_password_change {

    if [ -z "$user" ]; then
        user="app"
    elif [ "$user" != "app" ] && [ "$user" != "root" ]; then
        ui.message "User must be 'app' or 'root'."
        exit
    fi

    if [ "$user" == "root" ]; then

        if [ -f "$LOCK_FILE" ]; then
            user=`sudo cat "$LOCK_FILE"`
        else
            ui.message "You must first unlock your device."
            ui.message "See 'help system:status' for help." &&
            exit
        fi
    fi

    if [ -z "$password" ]; then
        ui.ask_password "New password for '$user'"; password=$asked
    fi

    ui.task "updating user '${user}' password" "update_user_password"
}

function ui_password_display {

    if passwd app -S | grep "NP"; then
        ui.message "Warning: no password set for the 'app' user."
    fi

    if [ -f "$LOCK_FILE" ]; then
        user=`sudo cat "$LOCK_FILE"`

        if passwd $user -S | grep "NP"; then
            ui.message "Warning: no password set for the '${user}' user."
        fi
    fi
}

case "$1" in
    change) ui_password_change;;
    *) ui_password_display;;
esac

